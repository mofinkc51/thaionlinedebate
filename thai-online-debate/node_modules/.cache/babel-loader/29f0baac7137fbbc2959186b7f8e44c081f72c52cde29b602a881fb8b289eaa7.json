{"ast":null,"code":"import { withSwal } from 'react-sweetalert2';\nexport default _c2 = withSwal(_c = (props, ref) => {\n  const {\n    swal,\n    ...rest\n  } = props;\n  function user_validation(username, min, max) {\n    var username_len = username.value.length;\n    if (username_len == 0 || username_len < min || username_len > max) {\n      Swal.fire({\n        icon: 'error',\n        title: 'Oops...',\n        text: \"Username cannot be blank /lenght between \" + min + \" to \" + max\n      });\n      username.focus();\n      return false;\n    }\n    return true;\n  }\n  //pass\n  function password_validation(password, min, max) {\n    var password_len = password.value.length;\n    if (password_len == 0 || password_len < min || password_len > max) {\n      Swal.fire({\n        icon: 'error',\n        title: 'Oops...',\n        text: \"Password cannot be blank /lenght between \" + min + \" to \" + max\n      });\n      password.focus();\n      return false;\n    }\n    return true;\n  }\n  //letter\n  function allletter(inputtxt) {\n    var letters = /^[A-Za-z]+$/;\n    if (inputtxt.value.match(letters)) {\n      return true;\n    } else {\n      Swal.fire({\n        icon: 'error',\n        title: 'Oops...',\n        text: \"Please \" + inputtxt.placeholder + \" with alphabet characters only\"\n      });\n      inputtxt.focus();\n      return false;\n    }\n  }\n\n  //mail\n  function email_validation(email) {\n    var mailformat = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n    if (email.value.match(mailformat)) {\n      return true;\n    } else {\n      Swal.fire({\n        icon: 'error',\n        title: 'Oops...',\n        text: \"You have entered an invalid email address!\"\n      });\n      email.focus();\n      return false;\n    }\n  }\n  //country\n  function country_validation(country) {\n    if (country.value == \"\") {\n      Swal.fire({\n        icon: 'error',\n        title: 'Oops...',\n        text: \"Please Select your country\"\n      });\n      country.focus();\n      return false;\n    }\n    return true;\n  }\n  //zip\n  function zip_validation(zip) {\n    var numbers = /^[0-9]+$/;\n    if (zip.value.match(numbers)) {\n      return true;\n    } else {\n      Swal.fire({\n        icon: 'error',\n        title: 'Oops...',\n        text: \"Zip cannot be blank / numbers only\"\n      });\n      zip.focus();\n      return false;\n    }\n  }\n  //language\n  function language_validation(language) {\n    if (language[0].checked || language[1].checked) {\n      return true;\n    } else {\n      Swal.fire({\n        icon: 'error',\n        title: 'Oops...',\n        text: \"Please select your language\"\n      });\n      return false;\n    }\n  }\n  //gender\n  function gender_validation(gender) {\n    if (gender[0].checked || gender[1].checked || gender[2].checked) {\n      return true;\n    } else {\n      Swal.fire({\n        icon: 'error',\n        title: 'Oops...',\n        text: \"Please select your gender\"\n      });\n      return false;\n    }\n  }\n});\nvar _c, _c2;\n$RefreshReg$(_c, \"%default%$withSwal\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["withSwal","_c2","_c","props","ref","swal","rest","user_validation","username","min","max","username_len","value","length","Swal","fire","icon","title","text","focus","password_validation","password","password_len","allletter","inputtxt","letters","match","placeholder","email_validation","email","mailformat","country_validation","country","zip_validation","zip","numbers","language_validation","language","checked","gender_validation","gender","$RefreshReg$"],"sources":["C:/Users/mofin/Desktop/Final Project/thaionlinedebate/thai-online-debate/src/checked.js"],"sourcesContent":["\r\nimport { withSwal } from 'react-sweetalert2';\r\n\r\nexport default withSwal((props, ref) => {\r\n    const { swal, ...rest } = props;\r\n\r\n function user_validation(username, min ,max) {\r\n    var username_len = username.value.length;\r\n    if (username_len == 0 || username_len < min || username_len > max) {\r\n        Swal.fire({\r\n            icon: 'error',\r\n            title: 'Oops...',\r\n            text: (\"Username cannot be blank /lenght between \" + min + \" to \" + max)\r\n          })\r\n        username.focus();\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n//pass\r\nfunction password_validation(password, min ,max) {\r\n    var password_len = password.value.length;\r\n    if (password_len == 0 || password_len < min || password_len > max) {\r\n        Swal.fire({\r\n            icon: 'error',\r\n            title: 'Oops...',\r\n            text: (\"Password cannot be blank /lenght between \" + min + \" to \" + max)\r\n          })\r\n        password.focus();\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n//letter\r\nfunction allletter(inputtxt) {\r\n    var letters = /^[A-Za-z]+$/;\r\n    if(inputtxt.value.match(letters)) {\r\n        return true;\r\n    } else {        \r\n        Swal.fire({\r\n            icon: 'error',\r\n            title: 'Oops...',\r\n            text:(\"Please \"+ inputtxt.placeholder + \" with alphabet characters only\")\r\n        })\r\n        inputtxt.focus();\r\n        return false;\r\n    }\r\n}\r\n\r\n//mail\r\nfunction email_validation(email) {\r\n    var mailformat = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n    if (email.value.match(mailformat)) {\r\n        return true;\r\n    }\r\n    else {        \r\n        Swal.fire({\r\n            icon: 'error',\r\n            title: 'Oops...',\r\n            text: (\"You have entered an invalid email address!\")\r\n        })\r\n        email.focus();\r\n        return false;\r\n    }\r\n}\r\n//country\r\nfunction country_validation(country) {\r\n    if (country.value == \"\") {        \r\n        Swal.fire({\r\n            icon: 'error',\r\n            title: 'Oops...',\r\n            text:(\"Please Select your country\")\r\n    })\r\n        country.focus();\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n//zip\r\nfunction zip_validation(zip) {\r\n    var numbers = /^[0-9]+$/;\r\n    if (zip.value.match(numbers)) {\r\n        return true;\r\n    } else {        \r\n        Swal.fire({\r\n            icon: 'error',\r\n            title: 'Oops...',\r\n            text:(\"Zip cannot be blank / numbers only\")\r\n        })\r\n        zip.focus();\r\n        return false;\r\n    }\r\n}\r\n//language\r\nfunction language_validation(language) {\r\n    if (language[0].checked || language[1].checked) {\r\n        return true;\r\n    } else {        \r\n        Swal.fire({\r\n            icon: 'error',\r\n            title: 'Oops...',\r\n            text:(\"Please select your language\")\r\n        })\r\n        return false;\r\n        \r\n    }\r\n\r\n}\r\n//gender\r\nfunction gender_validation(gender) {\r\n    if (gender[0].checked || gender[1].checked || gender[2].checked) {\r\n        return true;\r\n    } else {        \r\n        Swal.fire({\r\n            icon: 'error',\r\n            title: 'Oops...',\r\n            text:(\"Please select your gender\")\r\n        })\r\n        return false;\r\n        \r\n    }\r\n}\r\n\r\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}