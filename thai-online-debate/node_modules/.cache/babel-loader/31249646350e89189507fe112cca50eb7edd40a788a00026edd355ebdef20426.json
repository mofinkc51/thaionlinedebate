{"ast":null,"code":"/* tslint:disable */\n/* eslint-disable */\n/* prettier-ignore */\n\n/* auto-generated by NAPI-RS */\n\nconst {\n  existsSync,\n  readFileSync\n} = require('fs');\nconst {\n  join\n} = require('path');\nconst {\n  platform,\n  arch\n} = process;\nlet nativeBinding = null;\nlet localFileExisted = false;\nlet loadError = null;\nfunction isMusl() {\n  // For Node 10\n  if (!process.report || typeof process.report.getReport !== 'function') {\n    try {\n      const lddPath = require('child_process').execSync('which ldd').toString().trim();\n      return readFileSync(lddPath, 'utf8').includes('musl');\n    } catch (e) {\n      return true;\n    }\n  } else {\n    const {\n      glibcVersionRuntime\n    } = process.report.getReport().header;\n    return !glibcVersionRuntime;\n  }\n}\nswitch (platform) {\n  case 'android':\n    switch (arch) {\n      case 'arm64':\n        localFileExisted = existsSync(join(__dirname, 'ngrok.android-arm64.node'));\n        try {\n          if (localFileExisted) {\n            nativeBinding = require('./ngrok.android-arm64.node');\n          } else {\n            nativeBinding = require('@ngrok/ngrok-android-arm64');\n          }\n        } catch (e) {\n          loadError = e;\n        }\n        break;\n      case 'arm':\n        localFileExisted = existsSync(join(__dirname, 'ngrok.android-arm-eabi.node'));\n        try {\n          if (localFileExisted) {\n            nativeBinding = require('./ngrok.android-arm-eabi.node');\n          } else {\n            nativeBinding = require('@ngrok/ngrok-android-arm-eabi');\n          }\n        } catch (e) {\n          loadError = e;\n        }\n        break;\n      default:\n        throw new Error(`Unsupported architecture on Android ${arch}`);\n    }\n    break;\n  case 'win32':\n    switch (arch) {\n      case 'x64':\n        localFileExisted = existsSync(join(__dirname, 'ngrok.win32-x64-msvc.node'));\n        try {\n          if (localFileExisted) {\n            nativeBinding = require('./ngrok.win32-x64-msvc.node');\n          } else {\n            nativeBinding = require('@ngrok/ngrok-win32-x64-msvc');\n          }\n        } catch (e) {\n          loadError = e;\n        }\n        break;\n      case 'ia32':\n        localFileExisted = existsSync(join(__dirname, 'ngrok.win32-ia32-msvc.node'));\n        try {\n          if (localFileExisted) {\n            nativeBinding = require('./ngrok.win32-ia32-msvc.node');\n          } else {\n            nativeBinding = require('@ngrok/ngrok-win32-ia32-msvc');\n          }\n        } catch (e) {\n          loadError = e;\n        }\n        break;\n      case 'arm64':\n        localFileExisted = existsSync(join(__dirname, 'ngrok.win32-arm64-msvc.node'));\n        try {\n          if (localFileExisted) {\n            nativeBinding = require('./ngrok.win32-arm64-msvc.node');\n          } else {\n            nativeBinding = require('@ngrok/ngrok-win32-arm64-msvc');\n          }\n        } catch (e) {\n          loadError = e;\n        }\n        break;\n      default:\n        throw new Error(`Unsupported architecture on Windows: ${arch}`);\n    }\n    break;\n  case 'darwin':\n    localFileExisted = existsSync(join(__dirname, 'ngrok.darwin-universal.node'));\n    try {\n      if (localFileExisted) {\n        nativeBinding = require('./ngrok.darwin-universal.node');\n      } else {\n        nativeBinding = require('@ngrok/ngrok-darwin-universal');\n      }\n      break;\n    } catch {}\n    switch (arch) {\n      case 'x64':\n        localFileExisted = existsSync(join(__dirname, 'ngrok.darwin-x64.node'));\n        try {\n          if (localFileExisted) {\n            nativeBinding = require('./ngrok.darwin-x64.node');\n          } else {\n            nativeBinding = require('@ngrok/ngrok-darwin-x64');\n          }\n        } catch (e) {\n          loadError = e;\n        }\n        break;\n      case 'arm64':\n        localFileExisted = existsSync(join(__dirname, 'ngrok.darwin-arm64.node'));\n        try {\n          if (localFileExisted) {\n            nativeBinding = require('./ngrok.darwin-arm64.node');\n          } else {\n            nativeBinding = require('@ngrok/ngrok-darwin-arm64');\n          }\n        } catch (e) {\n          loadError = e;\n        }\n        break;\n      default:\n        throw new Error(`Unsupported architecture on macOS: ${arch}`);\n    }\n    break;\n  case 'freebsd':\n    if (arch !== 'x64') {\n      throw new Error(`Unsupported architecture on FreeBSD: ${arch}`);\n    }\n    localFileExisted = existsSync(join(__dirname, 'ngrok.freebsd-x64.node'));\n    try {\n      if (localFileExisted) {\n        nativeBinding = require('./ngrok.freebsd-x64.node');\n      } else {\n        nativeBinding = require('@ngrok/ngrok-freebsd-x64');\n      }\n    } catch (e) {\n      loadError = e;\n    }\n    break;\n  case 'linux':\n    switch (arch) {\n      case 'x64':\n        if (isMusl()) {\n          localFileExisted = existsSync(join(__dirname, 'ngrok.linux-x64-musl.node'));\n          try {\n            if (localFileExisted) {\n              nativeBinding = require('./ngrok.linux-x64-musl.node');\n            } else {\n              nativeBinding = require('@ngrok/ngrok-linux-x64-musl');\n            }\n          } catch (e) {\n            loadError = e;\n          }\n        } else {\n          localFileExisted = existsSync(join(__dirname, 'ngrok.linux-x64-gnu.node'));\n          try {\n            if (localFileExisted) {\n              nativeBinding = require('./ngrok.linux-x64-gnu.node');\n            } else {\n              nativeBinding = require('@ngrok/ngrok-linux-x64-gnu');\n            }\n          } catch (e) {\n            loadError = e;\n          }\n        }\n        break;\n      case 'arm64':\n        if (isMusl()) {\n          localFileExisted = existsSync(join(__dirname, 'ngrok.linux-arm64-musl.node'));\n          try {\n            if (localFileExisted) {\n              nativeBinding = require('./ngrok.linux-arm64-musl.node');\n            } else {\n              nativeBinding = require('@ngrok/ngrok-linux-arm64-musl');\n            }\n          } catch (e) {\n            loadError = e;\n          }\n        } else {\n          localFileExisted = existsSync(join(__dirname, 'ngrok.linux-arm64-gnu.node'));\n          try {\n            if (localFileExisted) {\n              nativeBinding = require('./ngrok.linux-arm64-gnu.node');\n            } else {\n              nativeBinding = require('@ngrok/ngrok-linux-arm64-gnu');\n            }\n          } catch (e) {\n            loadError = e;\n          }\n        }\n        break;\n      case 'arm':\n        localFileExisted = existsSync(join(__dirname, 'ngrok.linux-arm-gnueabihf.node'));\n        try {\n          if (localFileExisted) {\n            nativeBinding = require('./ngrok.linux-arm-gnueabihf.node');\n          } else {\n            nativeBinding = require('@ngrok/ngrok-linux-arm-gnueabihf');\n          }\n        } catch (e) {\n          loadError = e;\n        }\n        break;\n      default:\n        throw new Error(`Unsupported architecture on Linux: ${arch}`);\n    }\n    break;\n  default:\n    throw new Error(`Unsupported OS: ${platform}, architecture: ${arch}`);\n}\nif (!nativeBinding) {\n  if (loadError) {\n    throw loadError;\n  }\n  throw new Error(`Failed to load native binding`);\n}\nconst {\n  connect,\n  disconnect,\n  kill,\n  loggingCallback,\n  authtoken,\n  NgrokSessionBuilder,\n  NgrokSession,\n  UpdateRequest,\n  NgrokTunnel,\n  tunnels,\n  getTunnel,\n  getTunnelByUrl,\n  NgrokHttpTunnelBuilder,\n  NgrokTcpTunnelBuilder,\n  NgrokTlsTunnelBuilder,\n  NgrokLabeledTunnelBuilder\n} = nativeBinding;\nmodule.exports.connect = connect;\nmodule.exports.disconnect = disconnect;\nmodule.exports.kill = kill;\nmodule.exports.loggingCallback = loggingCallback;\nmodule.exports.authtoken = authtoken;\nmodule.exports.NgrokSessionBuilder = NgrokSessionBuilder;\nmodule.exports.NgrokSession = NgrokSession;\nmodule.exports.UpdateRequest = UpdateRequest;\nmodule.exports.NgrokTunnel = NgrokTunnel;\nmodule.exports.tunnels = tunnels;\nmodule.exports.getTunnel = getTunnel;\nmodule.exports.getTunnelByUrl = getTunnelByUrl;\nmodule.exports.NgrokHttpTunnelBuilder = NgrokHttpTunnelBuilder;\nmodule.exports.NgrokTcpTunnelBuilder = NgrokTcpTunnelBuilder;\nmodule.exports.NgrokTlsTunnelBuilder = NgrokTlsTunnelBuilder;\nmodule.exports.NgrokLabeledTunnelBuilder = NgrokLabeledTunnelBuilder;\n//\n// javascript trailer\n//\n\nconst net = require(\"net\");\nconst fs = require(\"fs\");\nconst os = require(\"os\");\nconst path = require(\"path\");\n\n// wrap connect with the code for extending exception with error code\nNgrokSessionBuilder.prototype._connect = NgrokSessionBuilder.prototype.connect;\nNgrokSessionBuilder.prototype.connect = ngrokSessionConnect;\n\n// wrap listen with the bind code for passing to net.Server.listen()\nNgrokHttpTunnelBuilder.prototype._listen = NgrokHttpTunnelBuilder.prototype.listen;\nNgrokTcpTunnelBuilder.prototype._listen = NgrokTcpTunnelBuilder.prototype.listen;\nNgrokTlsTunnelBuilder.prototype._listen = NgrokTlsTunnelBuilder.prototype.listen;\nNgrokLabeledTunnelBuilder.prototype._listen = NgrokLabeledTunnelBuilder.prototype.listen;\nNgrokHttpTunnelBuilder.prototype.listen = ngrokBind;\nNgrokTcpTunnelBuilder.prototype.listen = ngrokBind;\nNgrokTlsTunnelBuilder.prototype.listen = ngrokBind;\nNgrokLabeledTunnelBuilder.prototype.listen = ngrokBind;\nNgrokHttpTunnelBuilder.prototype.listenAndServe = listenAndServe;\nNgrokTcpTunnelBuilder.prototype.listenAndServe = listenAndServe;\nNgrokTlsTunnelBuilder.prototype.listenAndServe = listenAndServe;\nNgrokLabeledTunnelBuilder.prototype.listenAndServe = listenAndServe;\n\n// Wrap session connect to fill in exception's errorCode\nasync function ngrokSessionConnect() {\n  try {\n    return await this._connect();\n  } catch (err) {\n    populateErrorCode(err);\n    throw err;\n  }\n}\n\n// Begin listening for new connections on this tunnel,\n// and bind to a local socket so this tunnel can be\n// passed into net.Server.listen().\nasync function ngrokBind(bind) {\n  try {\n    const tunnel = await this._listen();\n    if (bind !== false) {\n      const socket = await randomTcpSocket();\n      tunnel.socket = socket;\n      defineTunnelHandle(tunnel, socket);\n    }\n    return tunnel;\n  } catch (err) {\n    populateErrorCode(err);\n    throw err;\n  }\n}\n\n/// Begin listening for new connections on this tunnel and forwarding them to the given server.\nasync function listenAndServe(server) {\n  const tunnel = await this._listen();\n  tunnel.socket = await ngrokListen(server, tunnel);\n  return tunnel;\n}\nfunction populateErrorCode(err) {\n  if (err.message) {\n    const regex = /error_code: (ERR_NGROK_\\d+)$/;\n    const errorCode = err.message.match(regex);\n    if (errorCode && errorCode.length > 1) {\n      err.errorCode = errorCode[1];\n    }\n  }\n}\n\n// add a 'handle' getter to the tunnel so it can be\n// passed into net.Server.listen().\nfunction defineTunnelHandle(tunnel, socket) {\n  // NodeJS net.Server asks passed-in object for 'handle',\n  // Return the native TCP object so the pre-existing socket is used.\n  Object.defineProperty(tunnel, \"handle\", {\n    get: function () {\n      // turn on forwarding now that it has been requested\n      tunnel.forward(\"localhost:\" + socket.address().port);\n      return socket._handle;\n    }\n  });\n}\n\n// generate a net.Server listening to a random port\nasync function randomTcpSocket() {\n  return await asyncListen(new net.Server(), {\n    host: \"localhost\",\n    port: 0\n  });\n}\n\n// NodeJS has not promisified 'net': https://github.com/nodejs/node/issues/21482\nfunction asyncListen(server, options) {\n  return new Promise((resolve, reject) => {\n    const socket = server.listen(options);\n    socket.once(\"listening\", () => {\n      resolve(socket);\n    }).once(\"error\", err => {\n      reject(err);\n    });\n  });\n}\n\n// Make a session using NGROK_AUTHTOKEN from the environment,\n// and then return a listening HTTP tunnel.\nasync function defaultTunnel(bind) {\n  // set up a default session and tunnel\n  var builder = new NgrokSessionBuilder();\n  builder.authtokenFromEnv();\n  var session = await builder.connect();\n  var tunnel = await session.httpEndpoint().listen(bind);\n  tunnel.session = session; // surface to caller\n  return tunnel;\n}\n\n// Get a listenable ngrok tunnel, suitable for passing to net.Server.listen().\n// Uses the NGROK_AUTHTOKEN environment variable to authenticate.\nasync function listenable() {\n  return await defaultTunnel();\n}\n\n// Bind a server to a new ngrok tunnel, optionally passing in a pre-existing tunnel instead.\n// Uses the NGROK_AUTHTOKEN environment variable to authenticate if a new tunnel is created.\nasync function ngrokListen(server, tunnel) {\n  if (tunnel && tunnel.socket) {\n    // close the default bound port\n    tunnel.socket.close();\n  }\n  if (!tunnel) {\n    // turn off automatic bind\n    tunnel = await defaultTunnel(false);\n  }\n\n  // attempt pipe socket\n  try {\n    socket = await ngrokLinkPipe(tunnel, server);\n  } catch (err) {\n    console.debug(\"Using TCP socket. \" + err);\n    // fallback to tcp socket\n    socket = await ngrokLinkTcp(tunnel, server);\n  }\n  registerCleanup(tunnel, socket);\n  server.tunnel = tunnel; // surface to caller\n  socket.tunnel = tunnel; // surface to caller\n  // return the newly created net.Server, which will be different in the express case\n  return socket;\n}\nasync function ngrokLinkTcp(tunnel, server) {\n  // random local port\n  const socket = await asyncListen(server, {\n    host: \"localhost\",\n    port: 0\n  });\n  // forward to socket\n  tunnel.forward(\"localhost:\" + socket.address().port);\n  return socket;\n}\nfunction generatePipeFilename(tunnel, server) {\n  var proposed = \"tun-\" + tunnel.id() + \".sock\";\n\n  // windows leaves little choice\n  if (platform == \"win32\") {\n    return \"\\\\\\\\.\\\\pipe\\\\\" + proposed;\n  }\n\n  // try to make a directory in the current working directory\n  const dir = \".ngrok\";\n  try {\n    fs.mkdirSync(dir);\n  } catch (err) {\n    // move on\n  }\n  try {\n    fs.accessSync(dir, fs.constants.W_OK);\n    return dir + path.sep + proposed;\n  } catch (err) {\n    // move on\n  }\n\n  // try the OS temp directory, being careful not to exceed the maximum path length for unix sockets\n  // https://linux.die.net/man/7/unix\n  // https://unix.stackexchange.com/a/367012\n  if (os.tmpdir().length < 90) {\n    try {\n      fs.accessSync(os.tmpdir(), fs.constants.W_OK);\n      filepath = os.tmpdir() + path.sep + proposed;\n      if (filepath.length > 100) {\n        // truncate\n        filepath = filepath.substring(0, 100);\n      }\n      return filepath;\n    } catch (err) {\n      // move on\n    }\n  }\n\n  // fallback to current working directory. allow any exception to propagate\n  fs.accessSync(process.cwd(), fs.constants.W_OK);\n  return proposed;\n}\nasync function ngrokLinkPipe(tunnel, server) {\n  var filename = generatePipeFilename(tunnel);\n  // begin listening\n  const socket = await asyncListen(server, {\n    path: filename\n  });\n  // tighten permissions\n  try {\n    if (platform != \"win32\") {\n      fs.chmodSync(filename, fs.constants.S_IRWXU);\n    }\n  } catch (err) {\n    console.debug(\"Cannot change permissions of file: \" + filename);\n  }\n  // forward tunnel\n  var addr = \"unix:\" + filename;\n  if (platform == \"win32\") {\n    // convert pipe path to url\n    addr = \"pipe:\" + filename.replace(\"\\\\\\\\.\\\\pipe\\\\\", \"//./\");\n  }\n  tunnel.forward(addr);\n  socket.path = filename; // surface to caller\n\n  return socket;\n}\n\n// protect against multiple calls, for instance from npm\nvar sigintRan = false;\nfunction registerCleanup(tunnel, socket) {\n  process.on(\"SIGINT\", function () {\n    if (sigintRan) return;\n    sigintRan = true;\n    if (process.listenerCount(\"SIGINT\") > 1) {\n      // user has registered a handler, abort this one\n      return;\n    }\n    // close tunnel\n    if (tunnel) {\n      tunnel.close().catch(err => {\n        console.error(`Error closing tunnel: ${err}`);\n      });\n    }\n    // close webserver's socket\n    if (socket) socket.close();\n    // unregister any logging callback\n    loggingCallback();\n  });\n}\nfunction consoleLog(level) {\n  loggingCallback((level, target, message) => {\n    console.log(`${level} ${target} - ${message}`);\n  }, level);\n}\n\n// wrap connect with code to vectorize and split out functions\nconst _connect = connect;\nasync function ngrokConnect(config) {\n  if (config == undefined) config = 80;\n  if (Number.isInteger(config) || typeof config === \"string\" || config instanceof String) {\n    address = String(config);\n    if (Number.isInteger(config) && !address.includes(\":\")) {\n      address = `localhost:${address}`;\n    }\n    config = {\n      addr: address\n    };\n  }\n  // Convert addr to string to allow for numeric port numbers\n  const addr = config[\"addr\"];\n  if (Number.isInteger(addr)) config[\"addr\"] = \"localhost:\" + String(config[\"addr\"]);\n  // convert scalar values to arrays to meet what napi-rs expects\n  [\"auth\", \"basic_auth\", \"ip_restriction.allow_cidrs\", \"ip_restriction.deny_cidrs\", \"labels\", \"oauth.allow_domains\", \"oauth.allow_emails\", \"oauth.scopes\", \"oidc.scopes\", \"oidc.allow_domains\", \"oidc.allow_emails\", \"request_header.add\", \"request_header.remove\", \"response_header.add\", \"response_header.remove\", \"schemes\"].forEach(key => {\n    vectorize(config, key);\n  });\n  // convert dotted values to underscores for backwards compatibility\n  [\"ip_restriction.allow_cidrs\", \"ip_restriction.deny_cidrs\", \"oauth.allow_domains\", \"oauth.allow_emails\", \"oauth.scopes\", \"oauth.provider\", \"oidc.client_id\", \"oidc.client_secret\", \"oidc.scopes\", \"oidc.issuer_url\", \"oidc.allow_domains\", \"oidc.allow_emails\", \"request_header.add\", \"request_header.remove\", \"response_header.add\", \"response_header.remove\", \"verify_webhook.provider\", \"verify_webhook.secret\"].forEach(key => {\n    undot(config, key);\n  });\n  // break out the logging callback function to meet what napi-rs expects\n  var on_log_event;\n  if (config[\"onLogEvent\"]) {\n    const onLogEvent = config.onLogEvent;\n    on_log_event = (level, target, message) => {\n      onLogEvent(`${level} ${target} - ${message}`);\n    };\n    config[\"onLogEvent\"] = true;\n  }\n  // break out the status change callback functions to what napi-rs expects\n  var on_connection, on_disconnection;\n  if (config[\"onStatusChange\"]) {\n    const onStatusChange = config.onStatusChange;\n    on_connection = (status, err) => {\n      onStatusChange(status);\n    };\n    on_disconnection = (addr, err) => {\n      onStatusChange(\"closed\");\n    };\n    config[\"onStatusChange\"] = true;\n  }\n  // call into rust\n  try {\n    return await _connect(config, on_log_event, on_connection, on_disconnection);\n  } catch (err) {\n    populateErrorCode(err);\n    throw err;\n  }\n}\nfunction undot(config, dotKey) {\n  const noDotKey = dotKey.replace(\".\", \"_\");\n  if (config[dotKey] == null) return; // no dotKey value, done\n  if (config[noDotKey] == null) {\n    // nothing at destination, just set and be done\n    config[noDotKey] = config[dotKey];\n    return;\n  }\n  if (config[dotKey] instanceof Array && config[noDotKey] instanceof Array) {\n    // merge arrays\n    for (const obj of config[dotKey]) {\n      config[noDotKey].push(obj);\n    }\n  }\n  // destination exists and is not an array, do nothing so noDotKey can take precedence\n}\n\nfunction vectorize(config, key) {\n  // backwards compatible keys are passed in, check the new style as well\n  const noDotKey = key.replace(\".\", \"_\");\n  if (key != noDotKey) vectorize(config, noDotKey);\n  if (config[key] == null) return; // no value, done\n  if (!(config[key] instanceof Array)) {\n    config[key] = [config[key]];\n  }\n}\nmodule.exports.connect = ngrokConnect;\nmodule.exports.consoleLog = consoleLog;\nmodule.exports.listen = ngrokListen;\nmodule.exports.listenable = listenable;","map":{"version":3,"names":["existsSync","readFileSync","require","join","platform","arch","process","nativeBinding","localFileExisted","loadError","isMusl","report","getReport","lddPath","execSync","toString","trim","includes","e","glibcVersionRuntime","header","__dirname","Error","connect","disconnect","kill","loggingCallback","authtoken","NgrokSessionBuilder","NgrokSession","UpdateRequest","NgrokTunnel","tunnels","getTunnel","getTunnelByUrl","NgrokHttpTunnelBuilder","NgrokTcpTunnelBuilder","NgrokTlsTunnelBuilder","NgrokLabeledTunnelBuilder","module","exports","net","fs","os","path","prototype","_connect","ngrokSessionConnect","_listen","listen","ngrokBind","listenAndServe","err","populateErrorCode","bind","tunnel","socket","randomTcpSocket","defineTunnelHandle","server","ngrokListen","message","regex","errorCode","match","length","Object","defineProperty","get","forward","address","port","_handle","asyncListen","Server","host","options","Promise","resolve","reject","once","defaultTunnel","builder","authtokenFromEnv","session","httpEndpoint","listenable","close","ngrokLinkPipe","console","debug","ngrokLinkTcp","registerCleanup","generatePipeFilename","proposed","id","dir","mkdirSync","accessSync","constants","W_OK","sep","tmpdir","filepath","substring","cwd","filename","chmodSync","S_IRWXU","addr","replace","sigintRan","on","listenerCount","catch","error","consoleLog","level","target","log","ngrokConnect","config","undefined","Number","isInteger","String","forEach","key","vectorize","undot","on_log_event","onLogEvent","on_connection","on_disconnection","onStatusChange","status","dotKey","noDotKey","Array","obj","push"],"sources":["C:/Users/Synonym/Documents/GitHub/thaionlinedebate/node_modules/@ngrok/ngrok/index.js"],"sourcesContent":["/* tslint:disable */\r\n/* eslint-disable */\r\n/* prettier-ignore */\r\n\r\n/* auto-generated by NAPI-RS */\r\n\r\nconst { existsSync, readFileSync } = require('fs')\r\nconst { join } = require('path')\r\n\r\nconst { platform, arch } = process\r\n\r\nlet nativeBinding = null\r\nlet localFileExisted = false\r\nlet loadError = null\r\n\r\nfunction isMusl() {\r\n  // For Node 10\r\n  if (!process.report || typeof process.report.getReport !== 'function') {\r\n    try {\r\n      const lddPath = require('child_process').execSync('which ldd').toString().trim()\r\n      return readFileSync(lddPath, 'utf8').includes('musl')\r\n    } catch (e) {\r\n      return true\r\n    }\r\n  } else {\r\n    const { glibcVersionRuntime } = process.report.getReport().header\r\n    return !glibcVersionRuntime\r\n  }\r\n}\r\n\r\nswitch (platform) {\r\n  case 'android':\r\n    switch (arch) {\r\n      case 'arm64':\r\n        localFileExisted = existsSync(join(__dirname, 'ngrok.android-arm64.node'))\r\n        try {\r\n          if (localFileExisted) {\r\n            nativeBinding = require('./ngrok.android-arm64.node')\r\n          } else {\r\n            nativeBinding = require('@ngrok/ngrok-android-arm64')\r\n          }\r\n        } catch (e) {\r\n          loadError = e\r\n        }\r\n        break\r\n      case 'arm':\r\n        localFileExisted = existsSync(join(__dirname, 'ngrok.android-arm-eabi.node'))\r\n        try {\r\n          if (localFileExisted) {\r\n            nativeBinding = require('./ngrok.android-arm-eabi.node')\r\n          } else {\r\n            nativeBinding = require('@ngrok/ngrok-android-arm-eabi')\r\n          }\r\n        } catch (e) {\r\n          loadError = e\r\n        }\r\n        break\r\n      default:\r\n        throw new Error(`Unsupported architecture on Android ${arch}`)\r\n    }\r\n    break\r\n  case 'win32':\r\n    switch (arch) {\r\n      case 'x64':\r\n        localFileExisted = existsSync(\r\n          join(__dirname, 'ngrok.win32-x64-msvc.node')\r\n        )\r\n        try {\r\n          if (localFileExisted) {\r\n            nativeBinding = require('./ngrok.win32-x64-msvc.node')\r\n          } else {\r\n            nativeBinding = require('@ngrok/ngrok-win32-x64-msvc')\r\n          }\r\n        } catch (e) {\r\n          loadError = e\r\n        }\r\n        break\r\n      case 'ia32':\r\n        localFileExisted = existsSync(\r\n          join(__dirname, 'ngrok.win32-ia32-msvc.node')\r\n        )\r\n        try {\r\n          if (localFileExisted) {\r\n            nativeBinding = require('./ngrok.win32-ia32-msvc.node')\r\n          } else {\r\n            nativeBinding = require('@ngrok/ngrok-win32-ia32-msvc')\r\n          }\r\n        } catch (e) {\r\n          loadError = e\r\n        }\r\n        break\r\n      case 'arm64':\r\n        localFileExisted = existsSync(\r\n          join(__dirname, 'ngrok.win32-arm64-msvc.node')\r\n        )\r\n        try {\r\n          if (localFileExisted) {\r\n            nativeBinding = require('./ngrok.win32-arm64-msvc.node')\r\n          } else {\r\n            nativeBinding = require('@ngrok/ngrok-win32-arm64-msvc')\r\n          }\r\n        } catch (e) {\r\n          loadError = e\r\n        }\r\n        break\r\n      default:\r\n        throw new Error(`Unsupported architecture on Windows: ${arch}`)\r\n    }\r\n    break\r\n  case 'darwin':\r\n    localFileExisted = existsSync(join(__dirname, 'ngrok.darwin-universal.node'))\r\n    try {\r\n      if (localFileExisted) {\r\n        nativeBinding = require('./ngrok.darwin-universal.node')\r\n      } else {\r\n        nativeBinding = require('@ngrok/ngrok-darwin-universal')\r\n      }\r\n      break\r\n    } catch {}\r\n    switch (arch) {\r\n      case 'x64':\r\n        localFileExisted = existsSync(join(__dirname, 'ngrok.darwin-x64.node'))\r\n        try {\r\n          if (localFileExisted) {\r\n            nativeBinding = require('./ngrok.darwin-x64.node')\r\n          } else {\r\n            nativeBinding = require('@ngrok/ngrok-darwin-x64')\r\n          }\r\n        } catch (e) {\r\n          loadError = e\r\n        }\r\n        break\r\n      case 'arm64':\r\n        localFileExisted = existsSync(\r\n          join(__dirname, 'ngrok.darwin-arm64.node')\r\n        )\r\n        try {\r\n          if (localFileExisted) {\r\n            nativeBinding = require('./ngrok.darwin-arm64.node')\r\n          } else {\r\n            nativeBinding = require('@ngrok/ngrok-darwin-arm64')\r\n          }\r\n        } catch (e) {\r\n          loadError = e\r\n        }\r\n        break\r\n      default:\r\n        throw new Error(`Unsupported architecture on macOS: ${arch}`)\r\n    }\r\n    break\r\n  case 'freebsd':\r\n    if (arch !== 'x64') {\r\n      throw new Error(`Unsupported architecture on FreeBSD: ${arch}`)\r\n    }\r\n    localFileExisted = existsSync(join(__dirname, 'ngrok.freebsd-x64.node'))\r\n    try {\r\n      if (localFileExisted) {\r\n        nativeBinding = require('./ngrok.freebsd-x64.node')\r\n      } else {\r\n        nativeBinding = require('@ngrok/ngrok-freebsd-x64')\r\n      }\r\n    } catch (e) {\r\n      loadError = e\r\n    }\r\n    break\r\n  case 'linux':\r\n    switch (arch) {\r\n      case 'x64':\r\n        if (isMusl()) {\r\n          localFileExisted = existsSync(\r\n            join(__dirname, 'ngrok.linux-x64-musl.node')\r\n          )\r\n          try {\r\n            if (localFileExisted) {\r\n              nativeBinding = require('./ngrok.linux-x64-musl.node')\r\n            } else {\r\n              nativeBinding = require('@ngrok/ngrok-linux-x64-musl')\r\n            }\r\n          } catch (e) {\r\n            loadError = e\r\n          }\r\n        } else {\r\n          localFileExisted = existsSync(\r\n            join(__dirname, 'ngrok.linux-x64-gnu.node')\r\n          )\r\n          try {\r\n            if (localFileExisted) {\r\n              nativeBinding = require('./ngrok.linux-x64-gnu.node')\r\n            } else {\r\n              nativeBinding = require('@ngrok/ngrok-linux-x64-gnu')\r\n            }\r\n          } catch (e) {\r\n            loadError = e\r\n          }\r\n        }\r\n        break\r\n      case 'arm64':\r\n        if (isMusl()) {\r\n          localFileExisted = existsSync(\r\n            join(__dirname, 'ngrok.linux-arm64-musl.node')\r\n          )\r\n          try {\r\n            if (localFileExisted) {\r\n              nativeBinding = require('./ngrok.linux-arm64-musl.node')\r\n            } else {\r\n              nativeBinding = require('@ngrok/ngrok-linux-arm64-musl')\r\n            }\r\n          } catch (e) {\r\n            loadError = e\r\n          }\r\n        } else {\r\n          localFileExisted = existsSync(\r\n            join(__dirname, 'ngrok.linux-arm64-gnu.node')\r\n          )\r\n          try {\r\n            if (localFileExisted) {\r\n              nativeBinding = require('./ngrok.linux-arm64-gnu.node')\r\n            } else {\r\n              nativeBinding = require('@ngrok/ngrok-linux-arm64-gnu')\r\n            }\r\n          } catch (e) {\r\n            loadError = e\r\n          }\r\n        }\r\n        break\r\n      case 'arm':\r\n        localFileExisted = existsSync(\r\n          join(__dirname, 'ngrok.linux-arm-gnueabihf.node')\r\n        )\r\n        try {\r\n          if (localFileExisted) {\r\n            nativeBinding = require('./ngrok.linux-arm-gnueabihf.node')\r\n          } else {\r\n            nativeBinding = require('@ngrok/ngrok-linux-arm-gnueabihf')\r\n          }\r\n        } catch (e) {\r\n          loadError = e\r\n        }\r\n        break\r\n      default:\r\n        throw new Error(`Unsupported architecture on Linux: ${arch}`)\r\n    }\r\n    break\r\n  default:\r\n    throw new Error(`Unsupported OS: ${platform}, architecture: ${arch}`)\r\n}\r\n\r\nif (!nativeBinding) {\r\n  if (loadError) {\r\n    throw loadError\r\n  }\r\n  throw new Error(`Failed to load native binding`)\r\n}\r\n\r\nconst { connect, disconnect, kill, loggingCallback, authtoken, NgrokSessionBuilder, NgrokSession, UpdateRequest, NgrokTunnel, tunnels, getTunnel, getTunnelByUrl, NgrokHttpTunnelBuilder, NgrokTcpTunnelBuilder, NgrokTlsTunnelBuilder, NgrokLabeledTunnelBuilder } = nativeBinding\r\n\r\nmodule.exports.connect = connect\r\nmodule.exports.disconnect = disconnect\r\nmodule.exports.kill = kill\r\nmodule.exports.loggingCallback = loggingCallback\r\nmodule.exports.authtoken = authtoken\r\nmodule.exports.NgrokSessionBuilder = NgrokSessionBuilder\r\nmodule.exports.NgrokSession = NgrokSession\r\nmodule.exports.UpdateRequest = UpdateRequest\r\nmodule.exports.NgrokTunnel = NgrokTunnel\r\nmodule.exports.tunnels = tunnels\r\nmodule.exports.getTunnel = getTunnel\r\nmodule.exports.getTunnelByUrl = getTunnelByUrl\r\nmodule.exports.NgrokHttpTunnelBuilder = NgrokHttpTunnelBuilder\r\nmodule.exports.NgrokTcpTunnelBuilder = NgrokTcpTunnelBuilder\r\nmodule.exports.NgrokTlsTunnelBuilder = NgrokTlsTunnelBuilder\r\nmodule.exports.NgrokLabeledTunnelBuilder = NgrokLabeledTunnelBuilder\r\n//\r\n// javascript trailer\r\n//\r\n\r\nconst net = require(\"net\");\r\nconst fs = require(\"fs\");\r\nconst os = require(\"os\");\r\nconst path = require(\"path\");\r\n\r\n// wrap connect with the code for extending exception with error code\r\nNgrokSessionBuilder.prototype._connect = NgrokSessionBuilder.prototype.connect;\r\nNgrokSessionBuilder.prototype.connect = ngrokSessionConnect;\r\n\r\n// wrap listen with the bind code for passing to net.Server.listen()\r\nNgrokHttpTunnelBuilder.prototype._listen = NgrokHttpTunnelBuilder.prototype.listen;\r\nNgrokTcpTunnelBuilder.prototype._listen = NgrokTcpTunnelBuilder.prototype.listen;\r\nNgrokTlsTunnelBuilder.prototype._listen = NgrokTlsTunnelBuilder.prototype.listen;\r\nNgrokLabeledTunnelBuilder.prototype._listen = NgrokLabeledTunnelBuilder.prototype.listen;\r\n\r\nNgrokHttpTunnelBuilder.prototype.listen = ngrokBind;\r\nNgrokTcpTunnelBuilder.prototype.listen = ngrokBind;\r\nNgrokTlsTunnelBuilder.prototype.listen = ngrokBind;\r\nNgrokLabeledTunnelBuilder.prototype.listen = ngrokBind;\r\n\r\nNgrokHttpTunnelBuilder.prototype.listenAndServe = listenAndServe;\r\nNgrokTcpTunnelBuilder.prototype.listenAndServe = listenAndServe;\r\nNgrokTlsTunnelBuilder.prototype.listenAndServe = listenAndServe;\r\nNgrokLabeledTunnelBuilder.prototype.listenAndServe = listenAndServe;\r\n\r\n// Wrap session connect to fill in exception's errorCode\r\nasync function ngrokSessionConnect() {\r\n  try {\r\n    return await this._connect();\r\n  } catch (err) {\r\n    populateErrorCode(err);\r\n    throw err;\r\n  }\r\n}\r\n\r\n// Begin listening for new connections on this tunnel,\r\n// and bind to a local socket so this tunnel can be\r\n// passed into net.Server.listen().\r\nasync function ngrokBind(bind) {\r\n  try {\r\n    const tunnel = await this._listen();\r\n    if (bind !== false) {\r\n      const socket = await randomTcpSocket();\r\n      tunnel.socket = socket;\r\n      defineTunnelHandle(tunnel, socket);\r\n    }\r\n    return tunnel;\r\n  } catch (err) {\r\n    populateErrorCode(err);\r\n    throw err;\r\n  }\r\n}\r\n\r\n/// Begin listening for new connections on this tunnel and forwarding them to the given server.\r\nasync function listenAndServe(server) {\r\n  const tunnel = await this._listen();\r\n  tunnel.socket = await ngrokListen(server, tunnel);\r\n  return tunnel;\r\n}\r\n\r\nfunction populateErrorCode(err) {\r\n  if (err.message) {\r\n    const regex = /error_code: (ERR_NGROK_\\d+)$/;\r\n    const errorCode = err.message.match(regex);\r\n    if (errorCode && errorCode.length > 1) {\r\n      err.errorCode = errorCode[1];\r\n    }\r\n  }\r\n}\r\n\r\n// add a 'handle' getter to the tunnel so it can be\r\n// passed into net.Server.listen().\r\nfunction defineTunnelHandle(tunnel, socket) {\r\n  // NodeJS net.Server asks passed-in object for 'handle',\r\n  // Return the native TCP object so the pre-existing socket is used.\r\n  Object.defineProperty(tunnel, \"handle\", {\r\n    get: function () {\r\n      // turn on forwarding now that it has been requested\r\n      tunnel.forward(\"localhost:\" + socket.address().port);\r\n      return socket._handle;\r\n    },\r\n  });\r\n}\r\n\r\n// generate a net.Server listening to a random port\r\nasync function randomTcpSocket() {\r\n  return await asyncListen(new net.Server(), { host: \"localhost\", port: 0 });\r\n}\r\n\r\n// NodeJS has not promisified 'net': https://github.com/nodejs/node/issues/21482\r\nfunction asyncListen(server, options) {\r\n  return new Promise((resolve, reject) => {\r\n    const socket = server.listen(options);\r\n    socket\r\n      .once(\"listening\", () => {\r\n        resolve(socket);\r\n      })\r\n      .once(\"error\", (err) => {\r\n        reject(err);\r\n      });\r\n  });\r\n}\r\n\r\n// Make a session using NGROK_AUTHTOKEN from the environment,\r\n// and then return a listening HTTP tunnel.\r\nasync function defaultTunnel(bind) {\r\n  // set up a default session and tunnel\r\n  var builder = new NgrokSessionBuilder();\r\n  builder.authtokenFromEnv();\r\n  var session = await builder.connect();\r\n  var tunnel = await session.httpEndpoint().listen(bind);\r\n  tunnel.session = session; // surface to caller\r\n  return tunnel;\r\n}\r\n\r\n// Get a listenable ngrok tunnel, suitable for passing to net.Server.listen().\r\n// Uses the NGROK_AUTHTOKEN environment variable to authenticate.\r\nasync function listenable() {\r\n  return await defaultTunnel();\r\n}\r\n\r\n// Bind a server to a new ngrok tunnel, optionally passing in a pre-existing tunnel instead.\r\n// Uses the NGROK_AUTHTOKEN environment variable to authenticate if a new tunnel is created.\r\nasync function ngrokListen(server, tunnel) {\r\n  if (tunnel && tunnel.socket) {\r\n    // close the default bound port\r\n    tunnel.socket.close();\r\n  }\r\n  if (!tunnel) {\r\n    // turn off automatic bind\r\n    tunnel = await defaultTunnel(false);\r\n  }\r\n\r\n  // attempt pipe socket\r\n  try {\r\n    socket = await ngrokLinkPipe(tunnel, server);\r\n  } catch (err) {\r\n    console.debug(\"Using TCP socket. \" + err);\r\n    // fallback to tcp socket\r\n    socket = await ngrokLinkTcp(tunnel, server);\r\n  }\r\n  registerCleanup(tunnel, socket);\r\n\r\n  server.tunnel = tunnel; // surface to caller\r\n  socket.tunnel = tunnel; // surface to caller\r\n  // return the newly created net.Server, which will be different in the express case\r\n  return socket;\r\n}\r\n\r\nasync function ngrokLinkTcp(tunnel, server) {\r\n  // random local port\r\n  const socket = await asyncListen(server, { host: \"localhost\", port: 0 });\r\n  // forward to socket\r\n  tunnel.forward(\"localhost:\" + socket.address().port);\r\n  return socket;\r\n}\r\n\r\nfunction generatePipeFilename(tunnel, server) {\r\n  var proposed = \"tun-\" + tunnel.id() + \".sock\";\r\n\r\n  // windows leaves little choice\r\n  if (platform == \"win32\") {\r\n    return \"\\\\\\\\.\\\\pipe\\\\\" + proposed;\r\n  }\r\n\r\n  // try to make a directory in the current working directory\r\n  const dir = \".ngrok\";\r\n  try {\r\n    fs.mkdirSync(dir);\r\n  } catch (err) {\r\n    // move on\r\n  }\r\n  try {\r\n    fs.accessSync(dir, fs.constants.W_OK);\r\n    return dir + path.sep + proposed;\r\n  } catch (err) {\r\n    // move on\r\n  }\r\n\r\n  // try the OS temp directory, being careful not to exceed the maximum path length for unix sockets\r\n  // https://linux.die.net/man/7/unix\r\n  // https://unix.stackexchange.com/a/367012\r\n  if (os.tmpdir().length < 90) {\r\n    try {\r\n      fs.accessSync(os.tmpdir(), fs.constants.W_OK);\r\n      filepath = os.tmpdir() + path.sep + proposed;\r\n      if (filepath.length > 100) {\r\n        // truncate\r\n        filepath = filepath.substring(0, 100);\r\n      }\r\n      return filepath;\r\n    } catch (err) {\r\n      // move on\r\n    }\r\n  }\r\n\r\n  // fallback to current working directory. allow any exception to propagate\r\n  fs.accessSync(process.cwd(), fs.constants.W_OK);\r\n  return proposed;\r\n}\r\n\r\nasync function ngrokLinkPipe(tunnel, server) {\r\n  var filename = generatePipeFilename(tunnel);\r\n  // begin listening\r\n  const socket = await asyncListen(server, { path: filename });\r\n  // tighten permissions\r\n  try {\r\n    if (platform != \"win32\") {\r\n      fs.chmodSync(filename, fs.constants.S_IRWXU);\r\n    }\r\n  } catch (err) {\r\n    console.debug(\"Cannot change permissions of file: \" + filename);\r\n  }\r\n  // forward tunnel\r\n  var addr = \"unix:\" + filename;\r\n  if (platform == \"win32\") {\r\n    // convert pipe path to url\r\n    addr = \"pipe:\" + filename.replace(\"\\\\\\\\.\\\\pipe\\\\\", \"//./\");\r\n  }\r\n  tunnel.forward(addr);\r\n  socket.path = filename; // surface to caller\r\n\r\n  return socket;\r\n}\r\n\r\n// protect against multiple calls, for instance from npm\r\nvar sigintRan = false;\r\n\r\nfunction registerCleanup(tunnel, socket) {\r\n  process.on(\"SIGINT\", function () {\r\n    if (sigintRan) return;\r\n    sigintRan = true;\r\n\r\n    if (process.listenerCount(\"SIGINT\") > 1) {\r\n      // user has registered a handler, abort this one\r\n      return;\r\n    }\r\n    // close tunnel\r\n    if (tunnel) {\r\n      tunnel.close().catch((err) => {\r\n        console.error(`Error closing tunnel: ${err}`);\r\n      });\r\n    }\r\n    // close webserver's socket\r\n    if (socket) socket.close();\r\n    // unregister any logging callback\r\n    loggingCallback();\r\n  });\r\n}\r\n\r\nfunction consoleLog(level) {\r\n  loggingCallback((level, target, message) => {\r\n    console.log(`${level} ${target} - ${message}`);\r\n  }, level);\r\n}\r\n\r\n// wrap connect with code to vectorize and split out functions\r\nconst _connect = connect;\r\nasync function ngrokConnect(config) {\r\n  if (config == undefined) config = 80;\r\n  if (Number.isInteger(config) || typeof config === \"string\" || config instanceof String) {\r\n    address = String(config);\r\n    if (Number.isInteger(config) && !address.includes(\":\")) {\r\n      address = `localhost:${address}`;\r\n    }\r\n    config = { addr: address };\r\n  }\r\n  // Convert addr to string to allow for numeric port numbers\r\n  const addr = config[\"addr\"];\r\n  if (Number.isInteger(addr)) config[\"addr\"] = \"localhost:\" + String(config[\"addr\"]);\r\n  // convert scalar values to arrays to meet what napi-rs expects\r\n  [\r\n    \"auth\",\r\n    \"basic_auth\",\r\n    \"ip_restriction.allow_cidrs\",\r\n    \"ip_restriction.deny_cidrs\",\r\n    \"labels\",\r\n    \"oauth.allow_domains\",\r\n    \"oauth.allow_emails\",\r\n    \"oauth.scopes\",\r\n    \"oidc.scopes\",\r\n    \"oidc.allow_domains\",\r\n    \"oidc.allow_emails\",\r\n    \"request_header.add\",\r\n    \"request_header.remove\",\r\n    \"response_header.add\",\r\n    \"response_header.remove\",\r\n    \"schemes\",\r\n  ].forEach((key) => {\r\n    vectorize(config, key);\r\n  });\r\n  // convert dotted values to underscores for backwards compatibility\r\n  [\r\n    \"ip_restriction.allow_cidrs\",\r\n    \"ip_restriction.deny_cidrs\",\r\n    \"oauth.allow_domains\",\r\n    \"oauth.allow_emails\",\r\n    \"oauth.scopes\",\r\n    \"oauth.provider\",\r\n    \"oidc.client_id\",\r\n    \"oidc.client_secret\",\r\n    \"oidc.scopes\",\r\n    \"oidc.issuer_url\",\r\n    \"oidc.allow_domains\",\r\n    \"oidc.allow_emails\",\r\n    \"request_header.add\",\r\n    \"request_header.remove\",\r\n    \"response_header.add\",\r\n    \"response_header.remove\",\r\n    \"verify_webhook.provider\",\r\n    \"verify_webhook.secret\",\r\n  ].forEach((key) => {\r\n    undot(config, key);\r\n  });\r\n  // break out the logging callback function to meet what napi-rs expects\r\n  var on_log_event;\r\n  if (config[\"onLogEvent\"]) {\r\n    const onLogEvent = config.onLogEvent;\r\n    on_log_event = (level, target, message) => {\r\n      onLogEvent(`${level} ${target} - ${message}`);\r\n    };\r\n    config[\"onLogEvent\"] = true;\r\n  }\r\n  // break out the status change callback functions to what napi-rs expects\r\n  var on_connection, on_disconnection;\r\n  if (config[\"onStatusChange\"]) {\r\n    const onStatusChange = config.onStatusChange;\r\n    on_connection = (status, err) => {\r\n      onStatusChange(status);\r\n    };\r\n    on_disconnection = (addr, err) => {\r\n      onStatusChange(\"closed\");\r\n    };\r\n    config[\"onStatusChange\"] = true;\r\n  }\r\n  // call into rust\r\n  try {\r\n    return await _connect(config, on_log_event, on_connection, on_disconnection);\r\n  } catch (err) {\r\n    populateErrorCode(err);\r\n    throw err;\r\n  }\r\n}\r\n\r\nfunction undot(config, dotKey) {\r\n  const noDotKey = dotKey.replace(\".\", \"_\");\r\n  if (config[dotKey] == null) return; // no dotKey value, done\r\n  if (config[noDotKey] == null) {\r\n    // nothing at destination, just set and be done\r\n    config[noDotKey] = config[dotKey];\r\n    return;\r\n  }\r\n  if (config[dotKey] instanceof Array && config[noDotKey] instanceof Array) {\r\n    // merge arrays\r\n    for (const obj of config[dotKey]) {\r\n      config[noDotKey].push(obj);\r\n    }\r\n  }\r\n  // destination exists and is not an array, do nothing so noDotKey can take precedence\r\n}\r\n\r\nfunction vectorize(config, key) {\r\n  // backwards compatible keys are passed in, check the new style as well\r\n  const noDotKey = key.replace(\".\", \"_\");\r\n  if (key != noDotKey) vectorize(config, noDotKey);\r\n\r\n  if (config[key] == null) return; // no value, done\r\n  if (!(config[key] instanceof Array)) {\r\n    config[key] = [config[key]];\r\n  }\r\n}\r\n\r\nmodule.exports.connect = ngrokConnect;\r\nmodule.exports.consoleLog = consoleLog;\r\nmodule.exports.listen = ngrokListen;\r\nmodule.exports.listenable = listenable;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}